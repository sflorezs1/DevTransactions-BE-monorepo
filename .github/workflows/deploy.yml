# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
# 
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: sound-machine-399502
  GAR_LOCATION: us-central1
  GKE_CLUSTER: devtrasctions-cluster-be
  GKE_ZONE: us-central1-c
  GKE_REGION: us-central1
  DEPLOYMENT_NAME: gke-be
  REPOSITORY: devtrasactions-artifacts
  IMAGE: static-site
  GAR: us-central1-docker.pkg.dev/sound-machine-399502/devtrasactions-artifacts

jobs:
    setup-build-publish-deploy:
      name: Setup, Build, Publish, and Deploy
      runs-on: ubuntu-latest
      environment: production
      permissions:
        contents: 'read'
        id-token: 'write'
      steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Alternative option - authentication via credentials json test
      - id: 'auth'
        uses: 'google-github-actions/auth@v2.1.2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY}}'
      - name: Log in to Google Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GAR }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY  }} 
     
      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2.1.0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}

      - name: Install Nx
        run: npm install -g nx

      - name: Install Nx
        run: npm ci

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: pip install poetry

      - name: Install Poetry
        run: npm install


      - name: Install
        run: |
          cd apps/user_bridge && nx run user_bridge:build

 
      - name: Build and Publish
        run: |
          for app in $(ls apps/); do
            echo "Generating Dockerfile for: $app"
            dockerfile_path="apps/$app/Dockerfile"  # Path to Dockerfile
            echo 'FROM python:3.12-slim' >> $dockerfile_path
            echo "WORKDIR /app" >> $dockerfile_path 
            echo "RUN pip install poetry" >> $dockerfile_path
            echo "RUN tar -xf user_bridge-1.0.0.tar.gz && rm user_bridge-1.0.0.tar.gz" >> $dockerfile_path
            echo "WORKDIR /app/user_bridge-1.0.0" >> $dockerfile_path
            echo "RUN poetry install --no-dev" >> $dockerfile_path
            echo "EXPOSE 8000" >> $dockerfile_path
            echo "ENV PYTHONUNBUFFERED=1" >> $dockerfile_path
            echo 'CMD ["poetry", "run", "start"]' >> $dockerfile_path
            echo "Building and pushing image for: $app"
            docker build --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$app:$GITHUB_SHA" --build-arg GITHUB_SHA="$GITHUB_SHA" --build-arg GITHUB_REF="$GITHUB_REF" --file apps/$app/Dockerfile .
            docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$app:$GITHUB_SHA"
          done
